@model IEnumerable<Parkwhere05.Models.BookmarkReport>
@{
    ViewBag.Title = "Bookmark Reports";
}
@{
    System.Web.Script.Serialization.JavaScriptSerializer serializer = new System.Web.Script.Serialization.JavaScriptSerializer();
    serializer.MaxJsonLength = Int32.MaxValue;
}

@Styles.Render("~/Content/css")

<div class="well" id="wellHomePage">
    <h2>Bookmark Reports Group By User</h2>

    @*<script type="text/javascript" src="~/Scripts/jquery-2.1.4.js"></script>
        <script type="text/javascript" src="~/Scripts/jquery.unobtrusive-ajax.js"></script>*@

    <script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCpLBynr5qXRQgPXptGsKV3GPEYThsN5JI&sensor=false"></script>
    <script src="~/Scripts/svy21.js" type="text/javascript"></script>

    @section scripts {

    <section class="scripts">
        <script type="text/javascript">
        var map = new google.maps.Map(document.getElementById('map_canvas'), {
            zoom: 11,
            center: new google.maps.LatLng(1.3485232,103.8208814),
            mapTypeId: google.maps.MapTypeId.ROADMAP
        });

        /*Bubble sort*/
        function doBubbleSort(locations){
            
            var unsortedLocationObj_Temp;

            for (var i = 0; i < locations.length; i++)
            {
                for (var sort = 0; sort < locations.length - 1; sort++)
                {
                    if (locations[sort].UserCount < locations[sort + 1].UserCount) //big to small
                    {
                        unsortedLocationObj_Temp = locations[sort + 1];
                        locations[sort + 1] = locations[sort];
                        locations[sort] = unsortedLocationObj_Temp;
                    }
                }
            }
            return locations
        }

        /*Merge Sort*/
        function doMergeSort(locations){

            //Exit sort if length of item is less than 2
            if (locations.length < 2){
                return locations;
            }

            //Getting the middle value and split into left & right
            var middle = Math.floor(locations.length / 2),
                left = locations.slice(0, middle),
                right = locations.slice(middle);

            //Recursive doMergeSort of sorting left half and right half
            return merge(doMergeSort(left), doMergeSort(right));
        }

        function merge(left, right){

            //Variable to keep track of left/right index
            var result = [], lIndex = 0, rIndex = 0;

            //Compare and add corresponding results
            while (lIndex < left.length && rIndex < right.length){
                if (left[lIndex] > right[rIndex]){
                    result.push(left[lIndex++]);
                } else {
                    result.push(right[rIndex++]);
                }
            }

            return result.concat(left.slice(lIndex)).concat(right.slice(rIndex));
        }

        /*Quick Sort*/
        function doQuickSort(locations){

            //Terminates if location is empty
            if (locations.length === 0){
                return [];
            }

            var left = [], 
                right = [], 
                pivot = locations[0];

            //Iterate throuh each element
            for (var i = 1; i < locations.length; i++){

                if (locations[i].UserCount > pivot.UserCount) {
                    left.push(locations[i]);
                } else {
                    right.push(locations[i]);
                }
            }

            //Recursive repeat until all sorted
            return doQuickSort(left).concat(pivot, doQuickSort(right));
        }

        var infowindow = new google.maps.InfoWindow();
        var marker, i;

        var locations = @Html.Raw(serializer.Serialize(ViewBag.UnsortedBookmarkReportList));
            //console.log(locations);

            if(locations!=null)
            {
                // In this section, need to get the response time performance
                // result in JMeter for all three types of sort algorithm

                //console.time("bubble sort of locations");
                var locations = doBubbleSort(locations)
                //console.timeEnd("bubble sort of locations");

                //console.time("Merge sort of locations");
                //var locations = doMergeSort(locations);
                //console.timeEnd("Merge sort of locations");

                //console.time("Quicksort of locations");
                //var locations = doQuickSort(locations)
                //console.timeEnd("Quicksort of locations");

                console.log(locations);

                for (i = 0; i < locations.length; i++) {

                    // Initialization
                    var cv = new SVY21();

                    var resultLatLon = cv.computeLatLon(locations[i].x_coord, locations[i].y_coord);

                    marker = new google.maps.Marker({
                        position: new google.maps.LatLng(resultLatLon.lat, resultLatLon.lon),
                        map: map
                    });

                    google.maps.event.addListener(marker, 'click', (function(marker, i) {
                        return function() {
                            infowindow.setContent("Carpark Address :<br />" + locations[i].address +"<br/> Frequency: "+locations[i].UserCount +"<br/> User Email: "+locations[i].User_email);
                            infowindow.open(map, marker);
                        }
                    })(marker, i));
                }
            }
        </script>
    </section>
    }

    <div>
        <div id="map_canvas" style="height: 450px;"></div>
    </div>

    @*@Ajax.BeginForm("ShowSearchResults", "BookmarkReport",
         new AjaxOptions
         {
             HttpMethod = "POST",
             UpdateTargetId = "showBookReports",
             InsertionMode = InsertionMode.Replace
         })
        <h4>
            Carpark No: @Html.TextBox("carparkNo")
            <input type="submit" value="Search" />
        </h4>
        @{Html.EndForm();}*@

    @*<div id="showBookReports">
        <table class="table">
            <tr>
                <th>
                    @Html.DisplayNameFor(model => model.date)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.address)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.carparkNo)
                </th>
            </tr>


            @foreach (var item in Model)
            {
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => item.date)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.address)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.carparkNo)
                    </td>
                </tr>
            }
        </table>
    </div>*@


</div>
